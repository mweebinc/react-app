---
alwaysApply: true
---

# Main Orchestrator

## Core Philosophy

**Agentic Coding: Humans Requirements, Agents Code!**

### **Primary Objective**

**Create a production-ready React application based on human requirements.** The AI will analyze human requirements and implement a complete, functional, and deployable application that meets all specified needs.

### **Project Scope Clarification**

**This project focuses exclusively on frontend implementation.** The backend is already implemented using the Innque API, and this React application serves as a frontend client that connects to and consumes the existing Innque API services. No backend development is required.

### **Autonomous Development Approach**

**The AI is fully autonomous and will analyze the current project state to determine what needs to be implemented to achieve a production-ready application.**

**Project State Analysis:**
When you cannot directly read other rules, they are located in the `.cursor/rules/` folder Use the `fetch_rules` tool to retrieve specific rules when needed for implementation guidance.


1. **Empty Project**: If no React project exists, implement project setup with Vite and Tailwind CSS without postcss
2. **Basic Setup**: If project exists but lacks structure, implement project structure
3. **Structure Ready**: If project structure exists, implement mobile-first responsive components
4. **Components Ready**: If UI components exist, implement core pages and functionality
5. **Frontend Complete**: If frontend is functional, proceed to Innque API integration
6. **Code Quality Check**: Run `npm run lint` to ensure code quality and fix any linting issues
7. **Build Verification**: Run `npm run build` to ensure successful compilation and production readiness
8. **Development Server**: Start development server (runs in background) for runtime testing, ensure to close any existing dev server running on port 3000 first
9. **Console Log Capture**: Start Puppeteer console capture to test all routes for runtime errors (runs in foreground)
10. **git add and git commit**: Ensure all requirements are met and app is deployable

**Implementation Priority:**

- **Project Setup** → **Project Structure** → **Mobile Implementation** → **UI Components** → **Core Pages** → **API Integration** → **Code Quality** → **Build Verification** → **Development Server** → **Runtime Capture** → **Production Optimization**

### **Automated Workflow Sequence**

**Quality assurance workflow:**

1. **Code Implementation**: Write/update application code
2. **Lint Check**: `npm run lint` - Fix compile-time issues
3. **Build Verification**: `npm run build` - Ensure production readiness
4. **Development Server**: Start development server, ensure to close any existing dev server running on port 3000 first
5. **Console Capture**: Start Puppeteer console capture to test all routes for runtime errors (runs in foreground)
6. **Error Detection**: Monitor console output for runtime issues
7. **Issue Resolution**: Fix any detected errors or warnings
8. **git add and git commit**: Deployable application with no errors

### **Implementation Strategy**

- **Production-Ready Focus**: Implement all features required for a deployable application
- **Autonomous Decision Making**: AI analyzes current project state and decides next steps
- **Innque API Integration**: Connect to existing Innque API backend when frontend is ready
- **Mobile-First**: Responsive design with touch interactions
- **Project Structure**: Separation of concerns
- **DRY Principle**: Create reusable components to avoid code duplication
- **Single Responsibility**: Each component and function should have one clear purpose
- **Continuous Progress**: AI proceeds through all stages without mandatory stops
- **No Mock Data**: Avoid creating mock data - implement direct API integration from the start
- **Named Exports**: Use named exports for better tree shaking and explicit imports
- **Complete Feature Set**: Ensure all human requirements are fully implemented
- **Runtime Capture**: Real-time error detection and debugging capabilities
- **Quality Assurance**: Automated workflow with lint → build → development server → console capture

### **Quality Standards**

- **Requirement Fulfillment**: All human requirements must be fully implemented
- **Maintainability**: Clean, readable, and well-documented code
- **Component Consistency**: Maintain consistent design patterns across all UI components
- **Code Quality**: Run `npm run lint` and fix all linting issues before proceeding
- **Build Verification**: Run `npm run build` to ensure successful compilation and production readiness
- **Runtime Quality**: Use Puppeteer console capture to test all routes and detect runtime issues
- **Error-Free Deployment**: No console errors or warnings in production build