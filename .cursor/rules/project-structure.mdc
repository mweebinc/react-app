---
description: Use component-based architecture with clear separation of concerns and organized directory structure.
globs:
alwaysApply: false
---

## Project Structure

### Directory Organization

```
src/
├── App.jsx               # Main application entry point
├── AppProvider.jsx       # Global state provider
├── AppContext.jsx        # React context
├── portal.js             # Portal system for rendering components outside DOM hierarchy (modals, toasts)
├── hooks/
│   └── useScreenSize.js  # hook for responsive screen size detection
├── pages/                # Page components
│   ├── MainPage.jsx      # Main page
│   ├── SigninPage.jsx    # Authentication page
│   ├── SignupPage.js     # Registration page
│   ├── DashboardPage.jsx # Dashboard page
│   ├── CollectionListPage.jsx  # Generic list page for any collection
│   ├── CollectionFormPage.jsx  # Generic form page for any collection
│   └── [other-feature]/  # Feature-specific page
├── components/           # Reusable components
│   ├── FormFactory.jsx   # Dynamic form generator
│   ├── InputFactory.jsx  # Dynamic input generator
│   ├── Table.jsx         # Dynamic table generator
│   ├── MainLayout.jsx    # Layout components
│   ├── Navbar.jsx        # Top navigation bar components
│   ├── NavSidebar.jsx    # Collapsible sidebar navigation with menu items
│   ├── Sidebar.jsx       # Sidebar components
│   ├── Search.jsx        # Search components
│   ├── Spinner.jsx       # Spinner components
│   ├── ConfirmDialog.jsx # Confirmation dialog components
│   ├── Toast.jsx         # Toast notification components
│   └── [other-components].jsx # Other reusable components
└── [utility-files]       # Utility functions and helpers
```

```javascript
//src/portal.js
class Portal {
  constructor() {
    this.nodes = [];
    this.roots = [];
  }
  open(component, props = {}) {
    const node = document.createElement("div");
    node.setAttribute("tabindex", "-1");
    node.style.position = "relative";
    document.body.appendChild(node);
    this.nodes.push(node);
    const root = ReactDOM.createRoot(node);
    this.roots.push(root);
    // Clone the component and pass props
    const ComponentToRender = React.cloneElement(component, {
      ...props,
      onClose: () => this.close(root, node),
    });
    root.render(ComponentToRender);
    return {
      close: () => this.close(root, node),
      update: (newProps) => {
        const UpdatedComponent = React.cloneElement(component, {
          ...newProps,
          onClose: () => this.close(root, node),
        });
        root.render(UpdatedComponent);
      },
    };
  }

  close(root, node) {
    if (root && node) {
      root.unmount();
      node.remove();
      // Remove from arrays
      const rootIndex = this.roots.indexOf(root);
      const nodeIndex = this.nodes.indexOf(node);
      if (rootIndex > -1) {
        this.roots.splice(rootIndex, 1);
      }
      if (nodeIndex > -1) {
        this.nodes.splice(nodeIndex, 1);
      }
      // Remove body class if no more portals
      if (this.nodes.length === 0) {
        document.body.classList.remove("portal-open");
      }
    }
  }
  closeAll() {
    // implement it
  }
}
const portal = new Portal();
export { portal };
```

```javascript
//src/App.jsx
function App() {
  return (
    <Router>
      <Routes>
        <Route path="/signin" element={<SignInPage />} />
        <Route path="/signup" element={<SignUpPage />} />
        <Route path="/*" element={<MainPage />} />
      </Routes>
    </Router>
  );
}
```

```javascript
//src/AppProvider.jsx
import React, { useState } from "react";
import { AppContext } from "./AppContext";
function AppProvider({ children }) {
  const [user, setUser] = useState(null);
  const [schemas, setSchemas] = useState([]);
  const value = {
    user,
    setUser,
    schemas,
    setSchemas,
  };
  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;
}
```

```javascript
//src/main.jsx
ReactDOM.createRoot(document.getElementById("root")).render(
  <AppProvider>
    <App />
  </AppProvider>
);
```
