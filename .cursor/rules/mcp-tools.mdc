---
description: Use MCP Tool to update, create schema and object management operations for Innque API.
globs: 
alwaysApply: false
---
# MCP Tools for Schema and Data Management


When tasked with defining or modifying a schema for a collection:

1. Call `find_schema` (or alternatively `get_schema`) on the collection name.
2. Inspect the response:
   - If the schema **exists**, call `update_schema` with the new or modified definitions.
   - If the schema **does not exist**, call `create_schema`.
3. Include reasoning in your response, e.g.:
   - "Schema 'products' not found → calling create_schema"
   - "Schema 'users' found → calling update_schema to adjust field definitions"


## Tool Input Schemas

### Schema Management Tools

#### `create_schema`
**Purpose**: Creates a new collection schema in the database
**Input Schema**:
```json
{
  "collection": "string",     // Required. Collection name (e.g., "products")
  "fields": {                 // Required. Field definitions
    "fieldName": {
      "type": "string",       // Field type (String, Number, Boolean, etc.)
      "label": "string",      // Display label
      "required": boolean,    // Whether field is mandatory
      "placeholder": "string", // Placeholder text
      "tab": "string",        // Tab assignment
      "section": "string",    // Section assignment
      "col": "string"         // Tailwind column classes
    }
  }
}
```

#### `get_schema`
**Purpose**: Retrieves the schema of a required collection
**Input Schema**:
```json
{
  "collection": "string"      // Required. Collection name (e.g., "users")
}
```

#### `find_schema`
**Purpose**: Retrieves all schemas or searches for specific schemas
**Input Schema**:
```json
{
  "where": {},               // Optional. Filter criteria
  "skip": number,            // Optional. Number to skip for pagination
  "limit": number            // Optional. Maximum number to return (default: 100)
}
```

#### `update_schema`
**Purpose**: Updates the schema of a specified collection
**Input Schema**:
```json
{
  "collection": "string",     // Required. Collection name
  "schema": {                 // Required. Updated schema definition
    "fields": {},             // Required. Field definitions
    "options": {}             // Optional. Schema options
  }
}
```

#### `delete_schema`
**Purpose**: Deletes the schema of a specified collection
**Input Schema**:
```json
{
  "collection": "string"      // Required. Collection name
}
```

### Object Management Tools

#### `create_object`
**Purpose**: Creates a new object in the specified collection
**Input Schema**:
```json
{
  "collection": "string",     // Required. Collection name
  "object": {}                // Required. Object data to create
}
```

#### `get_object`
**Purpose**: Retrieves a single object from a collection
**Input Schema**:
```json
{
  "collection": "string",     // Required. Collection name
  "object_id": "string"       // Required. Object's unique identifier
}
```

#### `find_objects`
**Purpose**: Finds objects in a specified collection
**Input Schema**:
```json
{
  "collection": "string",     // Required. Collection name
  "where": {},               // Optional. Filter criteria
  "skip": number,            // Optional. Number to skip for pagination
  "limit": number            // Optional. Maximum number to return (default: 100)
}
```

#### `update_object`
**Purpose**: Updates an object in a collection
**Input Schema**:
```json
{
  "collection": "string",     // Required. Collection name
  "object_id": "string",      // Required. Object's unique identifier
  "object": {}                // Required. New object data
}
```

#### `delete_object`
**Purpose**: Removes a specific object from a collection
**Input Schema**:
```json
{
  "collection": "string",     // Required. Collection name
  "object_id": "string"       // Required. Object's unique identifier
}
```

#### `count_objects`
**Purpose**: Counts objects in a specified collection
**Input Schema**:
```json
{
  "collection": "string",     // Required. Collection name
  "where": {}                 // Optional. Filter criteria
}
```
