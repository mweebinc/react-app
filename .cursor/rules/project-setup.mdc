---
description: Setup guide for React applications with Vite and Tailwind CSS using official Vite plugin - no PostCSS dependencies, including Progressive Web Application (PWA) capabilities.
globs:
alwaysApply: false
---

# Project Setup

Setup guide for React applications with Vite and Tailwind CSS using the official Vite plugin without PostCSS dependencies.

### Key Dependencies

- **react** - Core framework for building user interfaces
- **react-router-dom** - Client-side routing for React applications
- **@tailwindcss/vite** - Official Vite plugin for Tailwind CSS integration
- **tailwindcss** - Utility-first CSS framework for rapid UI development
- **react-infinite-scroll-component** - Infinite scrolling pagination for large datasets
- **puppeteer** - Browser automation for end-to-end testing and debugging (REQUIRED)
- **vite-plugin-pwa** - Progressive Web Application capabilities
- **workbox-window** - Service worker management for PWA

## ðŸ“± Progressive Web Application (PWA) Setup

### LLM Agent PWA Implementation Instructions

When implementing PWA capabilities in the current React project, the LLM Agent should follow these steps:

#### 1. Install PWA Dependencies
```bash
npm install vite-plugin-pwa workbox-window
```

#### 2. Configure Vite PWA Plugin
Update `vite.config.js` to include PWA configuration:
```javascript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'
import { VitePWA } from 'vite-plugin-pwa'

export default defineConfig({
  plugins: [
    react(),
    tailwindcss(),
    VitePWA({
      registerType: 'autoUpdate',
      includeAssets: ['favicon.ico', 'apple-touch-icon.png', 'masked-icon.svg'],
      manifest: {
        name: '{{PROJECT_NAME}}',
        short_name: '{{PROJECT_SHORT_NAME}}',
        description: '{{PROJECT_DESCRIPTION}}',
        theme_color: '#ffffff',
        background_color: '#ffffff',
        display: 'standalone',
        orientation: 'portrait',
        scope: '/',
        start_url: '/',
        icons: [
          {
            src: 'pwa-192x192.png',
            sizes: '192x192',
            type: 'image/png'
          },
          {
            src: 'pwa-512x512.png',
            sizes: '512x512',
            type: 'image/png'
          }
        ]
      },
      workbox: {
        globPatterns: ['**/*.{js,css,html,ico,png,svg}']
      }
    })
  ],
  server: {
    host: "0.0.0.0",
    port: 3000,
    open: true,
  },
})
```

**LLM Agent Instructions**: Replace the following placeholders based on the project name from `package.json`:
- `{{PROJECT_NAME}}` - Use the project name from package.json (e.g., "cash-register" becomes "Cash Register")
- `{{PROJECT_SHORT_NAME}}` - Use a shortened version (e.g., "CashRegister")
- `{{PROJECT_DESCRIPTION}}` - Create a descriptive text based on the project purpose

#### 3. Add PWA Icons
Create PWA icon files in the `public` directory:
- `pwa-192x192.png` (192x192 pixels)
- `pwa-512x512.png` (512x512 pixels)
- `apple-touch-icon.png` (180x180 pixels)
- `masked-icon.svg` (monochrome icon)

#### 4. Update HTML Meta Tags
Add PWA meta tags to `index.html`:
```html
<meta name="theme-color" content="#ffffff">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="default">
<meta name="apple-mobile-web-app-title" content="{{PROJECT_NAME}}">
<link rel="apple-touch-icon" href="/apple-touch-icon.png">
<link rel="mask-icon" href="/masked-icon.svg" color="#000000">
```

#### 5. Register Service Worker
The Vite PWA plugin automatically handles service worker registration. No additional code needed.


## Quick Setup Commands

> **Important**: This setup creates the React project directly in the current directory. Do NOT create a subfolder - all files will be placed in your current working directory.

### 1. Create Vite Project in Current Directory

```bash
npm create vite@latest . -- --template react
```

**Important**: Follow the exact command - the `.` creates project in current directory, `-- --template react` auto-selects React template.

### 2. Install Dependencies

```bash
npm install tailwindcss @tailwindcss/vite react-infinite-scroll-component
npm install --save-dev puppeteer
```

**Important**: Do NOT install PostCSS or any PostCSS plugins. The `@tailwindcss/vite` plugin handles all CSS processing automatically without requiring PostCSS configuration.

### 3. Configure Vite Plugin

```javascript
// vite.config.js
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import tailwindcss from "@tailwindcss/vite";

export default defineConfig({
  plugins: [react(), tailwindcss()],
  server: {
    host: "0.0.0.0",
    port: 3000,
    open: true,
  },
});
```

### 4. Import Tailwind CSS

```css
/* src/index.css */
@import "tailwindcss";
::-webkit-scrollbar {
  width: 5px;
  height: 5px;
}
@media (min-width: 992px) {
  ::-webkit-scrollbar {
    width: 10px;
    height: 10px;
  }
}
::-webkit-scrollbar-thumb {
  background: rgba(0, 0, 0, 0.25);
}
::-webkit-scrollbar-track {
  background: rgba(0, 0, 0, 0.1);
}
```


### 5. Initialize Git Repository

```bash
git init
```

```bash
# Start development server (runs in background)
npm run dev
```