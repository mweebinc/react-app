---
description: Setup guide for React applications with Vite and Tailwind CSS using official Vite plugin - no PostCSS dependencies.
globs:
alwaysApply: false
---

# Project Setup

Setup guide for React applications with Vite and Tailwind CSS using the official Vite plugin without PostCSS dependencies.

### Key Dependencies

- **react** - Core framework for building user interfaces
- **react-router-dom** - Client-side routing for React applications
- **@tailwindcss/vite** - Official Vite plugin for Tailwind CSS integration
- **tailwindcss** - Utility-first CSS framework for rapid UI development
- **react-infinite-scroll-component** - Infinite scrolling pagination for large datasets
- **puppeteer** - Browser automation for console log capture and debugging (REQUIRED)

## Quick Setup Commands

> **Important**: This setup creates the React project directly in the current directory. Do NOT create a subfolder - all files will be placed in your current working directory.

### 1. Create Vite Project in Current Directory

```bash
npm create vite@latest . -- --template react --
```

**Note**: The `.` tells Vite to create the project in the current directory instead of creating a new subfolder.

### 2. Install Dependencies

```bash
npm install tailwindcss @tailwindcss/vite react-infinite-scroll-component
npm install --save-dev puppeteer
```

**Important**: Do NOT install PostCSS or any PostCSS plugins. The `@tailwindcss/vite` plugin handles all CSS processing automatically without requiring PostCSS configuration.

### 3. Configure Vite Plugin

```javascript
// vite.config.js
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import tailwindcss from "@tailwindcss/vite";

export default defineConfig({
  plugins: [react(), tailwindcss()],
  server: {
    host: "0.0.0.0",
    port: 3000,
    open: true,
  },
});
```

### 4. Setup Console Capture with Puppeteer (REQUIRED)

#### Create Console Capture Scripts

```javascript
// scripts/ConsoleCapture.js
import puppeteer from "puppeteer";
import process from "process";

class ConsoleCapture {
  constructor() {
    this.browser = null;
    this.page = null;
    this.isRunning = false;
    this.routes = [];
    this.timeout = 3000; // Default 3 seconds
    this.url = "http://localhost:3000";
  }
  parseArguments() {
    const args = process.argv.slice(2);
    for (let i = 0; i < args.length; i++) {
      const arg = args[i];
      const nextArg = args[i + 1];
      if ((arg === "--routes" || arg === "-r") && nextArg && !nextArg.startsWith("-")) {
        this.routes = nextArg.split(",").map((route) => route.trim());
        i++;
      } else if ((arg === "--timeout" || arg === "-t") && nextArg && !nextArg.startsWith("-")) {
        this.timeout = parseInt(nextArg) * 1000;
        i++;
      } else if ((arg === "--url" || arg === "-u") && nextArg && !nextArg.startsWith("-")) {
        this.url = nextArg;
        i++;
      } else if (arg === "--help" || arg === "-h") {
        this.showHelp();
        process.exit(0);
      }
    }
    if (this.routes.length === 0) {
      this.routes = ["/"];
    }
  }
  showHelp() {
    console.log(`
Console Capture Tool - Runtime Error Detection
Usage: node consoleCapture.js [options]
Options:
  -r, --routes <routes>   Comma-separated list of routes to test
  -t, --timeout <seconds>  Timeout in seconds for each route
  -u, --url <url>   Server URL for testing
  -h, --help              Show this help message
`);
  }

  async start() {
    try {
      this.parseArguments();
      console.log(`üöÄ Starting console capture with configuration:`);
      console.log(`   Routes: ${this.routes.join(", ")}`);
      console.log(`   Timeout: ${this.timeout / 1000} seconds per route`);
      console.log(`   Server URL: ${this.url}\n`);
      this.browser = await puppeteer.launch({
        headless: true,
        args: ["--no-sandbox", "--disable-setuid-sandbox"],
      });
      this.page = await this.browser.newPage();
      // Capture console output
      this.page.on("console", (msg) => {
        const timestamp = new Date().toISOString();
        const type = msg.type();
        const text = msg.text();
        const url = this.page.url();

        // Color-coded output
        const colors = {
          log: "\x1b[37m", // White
          info: "\x1b[34m", // Blue
          warn: "\x1b[33m", // Yellow
          error: "\x1b[31m", // Red
          debug: "\x1b[36m", // Cyan
        };
        const reset = "\x1b[0m";
        const color = colors[type] || colors.log;
        console.log(`${color}[${timestamp}] [${type.toUpperCase()}] [${url}] ${text}${reset}`);
      });

      // Capture page errors
      this.page.on("pageerror", (error) => {
        const timestamp = new Date().toISOString();
        const url = this.page.url();
        console.log(`\x1b[31m[${timestamp}] üö® PAGE ERROR [${url}]: ${error.message}\x1b[0m`);
        console.log(`\x1b[31m  Stack: ${error.stack}\x1b[0m`);
      });

      // Test each route
      for (const route of this.routes) {
        const fullUrl = `${this.url}${route}`;
        console.log(`\nüîç Testing route: ${fullUrl}`);
        try {
          await this.page.goto(fullUrl, {
            waitUntil: "networkidle0",
            timeout: 30000,
          });
          console.log(`‚úÖ Successfully loaded: ${fullUrl}`);
          // Wait for potential runtime errors to appear
          await new Promise((resolve) => setTimeout(resolve, this.timeout));
        } catch (error) {
          console.log(`‚ùå Failed to load: ${fullUrl}`);
          console.log(`   Error: ${error.message}`);
        }
      }

      console.log("\n‚úÖ Console capture completed for all routes");
      console.log("üìä Summary: All routes tested for runtime errors");
      await this.browser.close();
      process.exit(0);
    } catch (error) {
      console.error("‚ùå Failed to start console capture:", error.message);
      if (this.browser) {
        await this.browser.close();
      }
      process.exit(1);
    }
  }
}

const monitor = new ConsoleCapture();
monitor.start().catch(console.error);
```

### 5. Import Tailwind CSS

```css
/* src/index.css */
@import "tailwindcss";
::-webkit-scrollbar {
  width: 5px;
  height: 5px;
}
@media (min-width: 992px) {
  ::-webkit-scrollbar {
    width: 10px;
    height: 10px;
  }
}
::-webkit-scrollbar-thumb {
  background: rgba(0, 0, 0, 0.25);
}
::-webkit-scrollbar-track {
  background: rgba(0, 0, 0, 0.1);
}
```


### 6. Initialize Git Repository

```bash
git init
```

```bash
# Start development server (runs in background)
npm run dev

# Start console capture (runs in foreground - LLM agent waits for completion)
node scripts/consoleMonitor.js --routes /,/signin,/signup,/dashboard,/other
```