---
description: Setup guide for React applications with Vite and Tailwind CSS using the official Vite plugin without PostCSS dependencies.
globs:
alwaysApply: false
---

# Project Setup

Setup guide for React applications with Vite and Tailwind CSS using the official Vite plugin without PostCSS dependencies.

### Key Dependencies

- **react** - Core framework for building user interfaces
- **react-router-dom** - Client-side routing for React applications
- **@tailwindcss/vite** - Official Vite plugin for Tailwind CSS integration
- **tailwindcss** - Utility-first CSS framework for rapid UI development
- **react-infinite-scroll-component** - Infinite scrolling pagination for large datasets
- **puppeteer** - Browser automation for console log capture and debugging (REQUIRED)

## Quick Setup Commands

### 1. Create Vite Project

```bash
npm create vite@latest . -- --template react --
```

### 2. Install Dependencies

```bash
npm install tailwindcss @tailwindcss/vite react-infinite-scroll-component
npm install --save-dev puppeteer
```

**Important**: Do NOT install PostCSS or any PostCSS plugins. The `@tailwindcss/vite` plugin handles all CSS processing automatically without requiring PostCSS configuration.

### 3. Configure Vite Plugin

```javascript
// vite.config.js
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import tailwindcss from "@tailwindcss/vite";

export default defineConfig({
  plugins: [react(), tailwindcss()],
  server: {
    host: "0.0.0.0",
    port: 3000,
    open: true,
  },
});
```

### 4. Setup Console Capture with Puppeteer (REQUIRED)

#### Create Console Capture Scripts

```javascript
// scripts/ConsoleCapture.js
import puppeteer from "puppeteer";
import process from "process";

class ConsoleCapture {
  constructor() {
    this.browser = null;
    this.page = null;
    this.isRunning = false;
  }

  async start() {
    try {
      this.browser = await puppeteer.launch({
        headless: true,
        args: ["--no-sandbox", "--disable-setuid-sandbox"],
      });

      this.page = await this.browser.newPage();

      // Capture console output
      this.page.on("console", (msg) => {
        const timestamp = new Date().toISOString();
        const type = msg.type();
        const text = msg.text();

        // Color-coded output
        const colors = {
          log: "\x1b[37m", // White
          info: "\x1b[34m", // Blue
          warn: "\x1b[33m", // Yellow
          error: "\x1b[31m", // Red
          debug: "\x1b[36m", // Cyan
        };

        const reset = "\x1b[0m";
        const color = colors[type] || colors.log;

        console.log(`${color}[${timestamp}] [${type.toUpperCase()}] ${text}${reset}`);
      });

      // Capture page errors
      this.page.on("pageerror", (error) => {
        const timestamp = new Date().toISOString();
        console.log(`\x1b[31m[${timestamp}] üö® PAGE ERROR: ${error.message}\x1b[0m`);
        console.log(`\x1b[31m  Stack: ${error.stack}\x1b[0m`);
      });

      await this.page.goto("http://localhost:3005/", {
        waitUntil: "networkidle0",
        timeout: 30000,
      });

      console.log("‚úÖ Console capture started successfully");
      console.log("üîç Capturing console output from http://localhost:3000/\n");

      // Wait for initial logs to appear, then exit
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      console.log("‚úÖ Console capture completed, exiting...");
      await this.browser.close();
      process.exit(0);

    } catch (error) {
      console.error("‚ùå Failed to start console capture:", error.message);
      if (this.browser) {
        await this.browser.close();
      }
      process.exit(1);
    }
  }
}

const monitor = new ConsoleCapture();
monitor.start().catch(console.error);
```

#### Add NPM Scripts

```json
{
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "capture": "node scripts/consoleCapture.js"
  }
}
```

### 5. Import Tailwind CSS

```css
/* src/index.css */
@import "tailwindcss";
::-webkit-scrollbar {
  width: 5px;
  height: 5px;
}
@media (min-width: 992px) {
  ::-webkit-scrollbar {
    width: 10px;
    height: 10px;
  }
}
::-webkit-scrollbar-thumb {
  background: rgba(0, 0, 0, 0.25);
}
::-webkit-scrollbar-track {
  background: rgba(0, 0, 0, 0.1);
}
```

```bash
# Terminal 1: Start development server
npm run dev

# Terminal 2: Start console capture
npm run capture
```
