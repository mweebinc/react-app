---
description: Progressive Web Application (PWA) implementation guide for React applications with offline capabilities, service workers, and mobile app-like experience.
globs:
alwaysApply: false
---

# Offline Implementation

Progressive Web Application (PWA) implementation guide for React applications with offline capabilities, service workers, and mobile app-like experience.

## ðŸ“± Progressive Web Application (PWA) Setup

### LLM Agent PWA Implementation Instructions

When implementing PWA capabilities in the current React project, the LLM Agent should follow these steps:

#### 1. Install PWA Dependencies
```bash
npm install vite-plugin-pwa
```

#### 2. Configure Vite PWA Plugin
Update `vite.config.js` to include PWA configuration:
```javascript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'
import { VitePWA } from 'vite-plugin-pwa'

export default defineConfig({
  plugins: [
    react(),
    tailwindcss(),
    VitePWA({
      registerType: 'autoUpdate',
      includeAssets: ['favicon.ico', 'apple-touch-icon.png', 'masked-icon.svg'],
      manifest: {
        name: '{{PROJECT_NAME}}',
        short_name: '{{PROJECT_SHORT_NAME}}',
        description: '{{PROJECT_DESCRIPTION}}',
        theme_color: '#ffffff',
        background_color: '#ffffff',
        display: 'standalone',
        orientation: 'portrait',
        scope: '/',
        start_url: '/',
        icons: [
          {
            src: 'pwa-192x192.png',
            sizes: '192x192',
            type: 'image/png'
          },
          {
            src: 'pwa-512x512.png',
            sizes: '512x512',
            type: 'image/png'
          }
        ]
      }
    })
  ],
  server: {
    host: "0.0.0.0",
    port: 3000,
    open: true,
  },
})
```

**LLM Agent Instructions**: Replace the following placeholders based on the project name from `package.json`:
- `{{PROJECT_NAME}}` - Use the project name from package.json (e.g., "cash-register" becomes "Cash Register")
- `{{PROJECT_SHORT_NAME}}` - Use a shortened version (e.g., "CashRegister")
- `{{PROJECT_DESCRIPTION}}` - Create a descriptive text based on the project purpose

#### 3. Add PWA Icons
Create PWA icon files in the `public` directory:
- `pwa-192x192.png` (192x192 pixels)
- `pwa-512x512.png` (512x512 pixels)
- `apple-touch-icon.png` (180x180 pixels)
- `masked-icon.svg` (monochrome icon)

#### 4. Update HTML Meta Tags
Add PWA meta tags to `index.html`:
```html
<meta name="theme-color" content="#ffffff">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="default">
<meta name="apple-mobile-web-app-title" content="{{PROJECT_NAME}}">
<link rel="apple-touch-icon" href="/apple-touch-icon.png">
<link rel="mask-icon" href="/masked-icon.svg" color="#000000">
```

#### 5. Register Service Worker
The Vite PWA plugin automatically handles service worker registration. No additional code needed.

## Offline Capabilities

### Service Worker Configuration
The Vite PWA plugin provides automatic service worker generation with:
- **Caching Strategy**: Automatic caching of static assets
- **Update Management**: Auto-update with user notification
- **Offline Fallback**: Graceful degradation when offline

### Offline Data Management
For applications requiring offline data persistence:
- Use IndexedDB for local data storage
- Implement sync mechanisms for when connection is restored
- Cache API responses for offline access

### PWA Best Practices
- **Performance**: Optimize bundle size and loading times
- **Responsive Design**: Ensure mobile-first responsive layout
- **Accessibility**: Follow WCAG guidelines for PWA accessibility
- **Security**: Use HTTPS in production for PWA features
- **User Experience**: Provide clear offline indicators and sync status