---
description: This rule guides LLM agents on how to leverage Puppeteer for comprehensive end-to-end testing of React applications.
alwaysApply: false
---
# Project Testing Rule

## Core Philosophy

**End-to-End Testing with Real Data**: Implement comprehensive functional testing that validates user workflows through actual data inputs, form submissions, and business logic validation using Puppeteer exclusively.

**Visual Testing Configuration**: Configure Puppeteer for visual observation and optimal performance - use `headless: false`, eliminate artificial delays, and wait only for elements actually needed for test progression.

## Testing Strategy

**Modular Test Architecture**: Create focused test scripts in the `tests/` folder following the naming pattern `test-[feature-name].js`. Each script should follow single responsibility principle - one script per major feature or workflow.

**Real Data Validation**: Use realistic test data that mirrors production scenarios, including edge cases and boundary conditions. Validate both happy path and error scenarios through actual user workflows.

**Pre-Test Validation**: Before writing any test, verify that selectors match actual page elements to prevent test failures due to mismatched automation targets.

## Quality Assurance

**Comprehensive Error Capture**: Implement robust error handling that captures browser console errors, network failures, form validation errors, and UI interaction failures.

**Iterative Testing Loop**: After test execution, follow a continuous improvement cycle:
1. Analyze test results and identify root causes
2. Fix issues in either test code or application code
3. Re-run tests and validate results
4. Repeat until all tests pass without errors

**Quality Gates**: Maintain zero tolerance for test failures in production-ready code. Ensure complete coverage of critical user workflows with stable, flaky-free test performance.

## Implementation Principles

**Modular Structure**: Create reusable test utilities for browser management, form handling, error reporting, and business logic validation.

**Test Data Management**: Use consistent, realistic test data that supports comprehensive validation scenarios while maintaining test isolation.

**Continuous Integration**: Integrate testing into the development workflow - run tests after feature implementation, before deployments, and during refactoring efforts.

## Test Execution Workflow

**Immediate Test Execution**: After creating any test script, immediately run the test to validate functionality and catch issues early. Use `node tests/test-[feature-name].js` to execute individual test files and verify they work correctly before proceeding with additional development.